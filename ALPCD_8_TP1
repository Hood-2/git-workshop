import typer
import requests
import json
import csv
from typing import Annotated
import time
import re

app = typer.Typer()

api_key = "b6e101bc38980bc8302263c0e78ff3f3"
url = "https://api.itjobs.pt/job/list.json"
response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
dados = response.json()
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}

def export_csv(data, filename="recent_jobs.csv"):
    
    if isinstance(data, list):
        fieldnames = ["titulo"]
        data = [{"titulo": item} for item in data]
    elif isinstance(data, dict) and "results" in data:
        fieldnames = ["titulo", "empresa", "descrição", "data de publicação", "salário", "localização"]
        data = data["results"]
    else:
        print("Invalid data format for CSV export.")
        return

    with open(filename, "w", newline='', encoding="utf-8") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        
        if isinstance(data, list):
            writer.writerows(data)
        else:
            for job in data:
                writer.writerow({
                    "titulo": job.get("title", "N/A"),
                    "empresa": job.get("company", {}).get("name", "N/A"),
                    "descrição": job.get("body", "N/A"),
                    "data de publicação": job.get("publishedAt", "N/A"),
                    "salário": job.get("wage", "N/A"),
                    "localização": ", ".join([loc["name"] for loc in job.get("locations", [])]) if job.get("locations") else "N/A"
                })
    
    print(f"The CSV '{filename}' file was created successfully!")


@app.command(help="List the N most recent jobs published on itjobs.pt.")
def top(
    n: int = typer.Argument(..., help="Number of recent jobs to retrieve."),
    create_csv: Annotated[bool, typer.Option(prompt="Do you want to create a CSV file with this data?")] = False):

    """Example: >python file_name.py top 5"""

    new_url = f"{url}?api_key={api_key}&limit={n}"
    response = requests.get(new_url, headers={"User-Agent": "Mozilla/5.0"})
    dados = response.json()

    with open("dados_trabalhos.json", "w", encoding="utf-8") as file:
        json.dump(dados, file, indent=4)

    print(f"\n{n} most recent job titles:")
    job_details = [
        {
            "titulo": job["title"],
            "empresa": job.get("company", {}).get("name", "N/A"),
            "descrição": job.get("body", "N/A"),
            "data de publicação": job.get("publishedAt", "N/A"),
            "salário": job.get("wage", "N/A"),
            "localização": ", ".join([loc["name"] for loc in job.get("locations", [])]) if job.get("locations") else "N/A"
        }
        for job in dados.get("results", [])
    ]

    for job in job_details:
        print(job["titulo"])

    if create_csv:
        export_csv({"results": job_details}, filename='recent_job_details.csv')

@app.command(help="Search for job postings based on location, company, and number of jobs.")
def search(location: str, company: str, num_jobs: int, create_csv: Annotated[bool, typer.Option(prompt="Do you want to create a CSV file with this data?")] = False):
    """Example: >python file.py search "Lisboa" "KWAN" 5"""
    job_details = []
    page = 1
    location = location.lower()
    company = company.lower()

    while len(job_details) < num_jobs:
        job_data = obter_dados(page)  
        if not job_data or "results" not in job_data:
            break

        for job in job_data["results"]:
            job_location = [loc["name"].lower() for loc in job.get("locations", [])]
            job_company = job.get("company", {}).get("name", "").lower()
            job_types = [t["name"].lower() for t in job.get("types", [])]

            if location in job_location and company in job_company and "full-time" in job_types:
                job_details.append({
                    "titulo": job["title"],
                    "empresa": job.get("company", {}).get("name", "N/A"),
                    "descrição": job.get("body", "N/A"),
                    "data de publicação": job.get("publishedAt", "N/A"),
                    "salário": job.get("wage", "N/A"),
                    "localização": ", ".join([loc["name"] for loc in job.get("locations", [])]) if job.get("locations") else "N/A"
                })
                if len(job_details) >= num_jobs:
                    break
        page += 1

    for job in job_details:
        print(job["titulo"])

    if create_csv:
        export_csv({"results": job_details}, filename='company_full_time_jobs.csv')


def obter_dados(page):
    url = f'https://api.itjobs.pt/job/list.json?api_key={api_key}&page={page}'
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erro na requisição: {response.status_code}")
        return None
@app.command()
def salary(jobid: str):
    page = 1
    while True:
        dados = obter_dados(page)
        if not dados or "results" not in dados:
            break

        job_found = False  # Flag to check if the job ID is found

        for job in dados["results"]:
            if job["id"] == int(jobid):
                job_found = True  # Job ID found
                # Check if the wage is available
                if job["wage"]:
                    print(f"Salary for job ID {jobid}: {job['wage']}")
                    return job["wage"]
                else:
                    # If the wage is not provided, search for salary in the body
                    body_text = job["body"]
                    # Regex to find salary in body text (supports different formats)
                    salary_match = re.search(r'\b(\d{1,3}(?:,\d{3})*(?:\.\d{2})?)\s*(euros?|usd|dollars?|€|\$|eur|usd|dol)\b', body_text, re.IGNORECASE)
                    if salary_match:
                        salary_value = salary_match.group(0)
                        print(f"Salary found in description for job ID {jobid}: {salary_value}")
                        return salary_value
                print("Salary not found in job ID:", jobid)
                return "Salary not found"

        page += 1

    print("Job ID not found")
    raise SystemExit 


@app.command(help="List job titles that require specific skills within a given date range.")
def skills(
    skills: str, 
    start_date: str,
    end_date: str,
    create_csv: Annotated[bool, typer.Option(prompt="Do you want to create a CSV file with this data?")] = False):
    
    """Example: >python file_name.py skills "Python, SQL" 2024-01-01 2024-12-31"""
    
    skill_list = [skill.strip().lower() for skill in skills.split(",")]
    job_details = [] 
    page = 1

    date_istamp = time.mktime(time.strptime(start_date, '%Y-%m-%d'))
    date_fstamp = time.mktime(time.strptime(end_date, '%Y-%m-%d'))

    while True:
        job_data = obter_dados(page)
        if not job_data or "results" not in job_data:
            break
        
        for job in job_data["results"]:
            job_title = job.get("title", "")
            job_body = job.get("body", "").lower()
            job_date = job.get("publishedAt", "")

            job_datestamp = time.mktime(time.strptime(job_date.split(" ")[0], '%Y-%m-%d'))
            if not (date_istamp <= job_datestamp <= date_fstamp):
                continue

            if all(skill in job_body for skill in skill_list):
                job_details.append({
                    "titulo": job_title,
                    "empresa": job.get("company", {}).get("name", "N/A"),
                    "descrição": job.get("body", "N/A"),
                    "data de publicação": job.get("publishedAt", "N/A"),
                    "salário": job.get("wage", "N/A"),
                    "localização": ", ".join([loc["name"] for loc in job.get("locations", [])]) if job.get("locations") else "N/A"
                })

        page += 1

    typer.echo(json.dumps(job_details, indent=4))

    if create_csv:
        export_csv({"results": job_details}, filename="skills_job_details.csv")


if __name__ == "__main__":
    app()
